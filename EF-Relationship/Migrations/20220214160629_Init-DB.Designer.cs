// <auto-generated />
using EF_Relationship.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EF_Relationship.Migrations
{
    [DbContext(typeof(EFRelationshipContext))]
    [Migration("20220214160629_Init-DB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<string>("ActorsID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MoviesID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActorsID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("EF_Relationship.Models.Actor", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("GenderID")
                        .IsUnique();

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("EF_Relationship.Models.Award", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AwardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ActorID");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("EF_Relationship.Models.Gender", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenderType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("EF_Relationship.Models.Movie", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("EF_Relationship.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Relationship.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Relationship.Models.Actor", b =>
                {
                    b.HasOne("EF_Relationship.Models.Gender", "Gender")
                        .WithOne("Actor")
                        .HasForeignKey("EF_Relationship.Models.Actor", "GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("EF_Relationship.Models.Award", b =>
                {
                    b.HasOne("EF_Relationship.Models.Actor", "Actor")
                        .WithMany("Awards")
                        .HasForeignKey("ActorID");

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("EF_Relationship.Models.Actor", b =>
                {
                    b.Navigation("Awards");
                });

            modelBuilder.Entity("EF_Relationship.Models.Gender", b =>
                {
                    b.Navigation("Actor");
                });
#pragma warning restore 612, 618
        }
    }
}
